@page "/searchWord"
@using AntiSerum.Client.Models
@using System.Diagnostics;
@using System.Net.Http
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<h1>Word Search</h1>

<label>
    <input name="searchType" type="radio" checked="@(findOne == true)" @onchange="OnChange" /> Find one match
</label>
|
<label>
    <input name="searchType" type="radio" checked="@(findOne == false)" @onchange="OnChange" /> Find many matches
</label>

@if (findOne)
{
    <p>370000+ <a href="https://github.com/dwyl/english-words/blob/master/words_alpha.txt" target="_blank">unique word list</a></p>
}
else
{
    <p>360000+ word list with 2898 unique words</p>
}
<p>Message: @message</p>
<p>Time: <strong>@timer/s</strong></p>
<EditForm Model="@wordSearchValidation" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="word" @bind-Value="wordSearchValidation.Word" />

    <button type="submit">Search</button>
</EditForm>

@code {
    //wordSearchValidation is a model? component? that allows validation on our InputText
    //https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-3.1
    private WordValidation wordSearchValidation = new WordValidation();

    private MarkupString message = new MarkupString("");
    private decimal timer = (decimal)0.00;
    private bool isFound = false;
    private bool isSearching = false;
    private bool findOne = true;
    string responseMessage = "";

    public async Task HandleValidSubmit()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        message = (MarkupString)"<i>Searching word...</i>";
        timer = (decimal)0.00;

        //Blazor's initial enviroment is wierd. We wouldn't usually need this variable, but because
        //our inital enviroment is setup to require a token when making Controller requests, we need this
        //variable to bypass it.
        var client = HttpClientFactory.CreateClient("BlazorApp.PublicServerAPI");

        wordSearchValidation.findOne = findOne;

        //Calls a Post (It really should be a get or something) on the SearchWordController
        var response = await client.PostAsJsonAsync<WordValidation>("api/SearchWord", wordSearchValidation);

        //Spit back the response back to the UI
        if (findOne)
        {
            responseMessage = "'" + wordSearchValidation.Word + (response.StatusCode.ToString() == "OK" ? "' was <strong style='color:green'>found</strong>" : "' was <strong style='color:red'>not found</strong>");
        } else
        {

            responseMessage = "'" + wordSearchValidation.Word + (response.StatusCode.ToString() == "OK" ? "' was <strong style='color:green'>matched "+ response.Content.ReadAsStringAsync().Result + " times</strong>" : "' was <strong style='color:red'>not found</strong>");
        }

        message = (MarkupString)responseMessage;

        sw.Stop();
        timer = (decimal)sw.ElapsedMilliseconds / (decimal)1000;

    }

    private void OnChange(ChangeEventArgs args)
    {
        findOne = !findOne;
    }
}
